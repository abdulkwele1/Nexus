<template>
  <div class="container">
    <!-- Navigation bar -->
    <nav class="navbar">
      <button class="nav-button" @click="goTo('/home')">Home</button>
      <button class="nav-button" @click="switchGraph('yield')">Solar Yield</button>
      <button class="nav-button" @click="switchGraph('consumption')">Solar Consumption</button>
    </nav>

    <!-- Conditional rendering of graphs and controls for Solar Yield -->
    <div class="chart-container" v-if="currentGraph === 'yield'">
      <!-- Graph Component -->
      <Graph :solarData="solarData" :isLineChart="isLineChart"></Graph>

      <!-- Line chart switch button -->
      <button class="line-chart-toggle-button" @click="isLineChart = !isLineChart">
        {{ isLineChart ? "Bar chart" : "Line chart" }}
      </button>

      <!-- Export button -->
      <button class="export-button" @click="exportData">ðŸ“„ Export</button>

      <!-- Solar Panels Button and Modal -->
      <div class="solar-panel-container">
        <button class="solar-panels-button" @click="togglePanelModal">Solar Panels</button>
      </div>

      <!-- Conditional Rendering for Panels -->
      <div v-if="currentPanel === 'panelOne'">
        <!-- Content for Solar Panel 1 -->
        <div class="panel-content">
          <h3>Solar Panel 1 Data</h3>
          <p>Manage and view data for Solar Panel 1 directly in this page.</p>
          <!-- Add more content for Panel One if needed -->
        </div>
      </div>
      <div v-else-if="currentPanel === 'panelTwo'">
        <panel-two></panel-two>
      </div>
      <div v-else-if="currentPanel === 'panelThree'">
        <panel-three></panel-three>
      </div>
    </div>

    <!-- Date Range Selection and Calendar Modal -->
    <button class="current-date-button" @click="openCalendar">
      Select Date Range &#9662;
    </button>

    <div v-if="showCalendar" class="modal-overlay" @click="closeCalendar">
      <div class="modal" @click.stop>
        <h2>Select Date Range</h2>
        <div class="calendar-container">
          <div class="calendar">
            <h3>Start Point</h3>
            <input type="date" v-model="startDate" />
          </div>
          <div class="calendar">
            <h3>End Point</h3>
            <input type="date" v-model="endDate" />
          </div>
        </div>
        <p v-if="errorMessage" class="error-message">{{ errorMessage }}</p>
        <button @click="closeCalendar">Close</button>
      </div>
    </div>

    <!-- Data Entry Form -->
    <div class="data-entry-form">
      <h3>Add Data Point</h3>
      <input type="text" v-model="newDate" placeholder="YYYY/MM/DD" @input="formatDateInput" />
      <input type="text" v-model="newProduction" placeholder="kWh Production" @keypress="allowOnlyNumbers" />
      <button @click="addData">Add Data</button>
      <button @click="clearData">Clear Data</button>
    </div>

    <!-- List of Data Points with Remove Option -->
    <div class="data-list">
      <h3>Data Points</h3>
      <ul>
        <li v-for="(point, index) in solarData" :key="index">
          {{ point.date.toISOString().split('T')[0] }} - {{ point.production }} kWh
          <button @click="removeData(index)">Remove</button>
        </li>
      </ul>
    </div>

    <!-- Solar Consumption Graph -->
    <div class="chart-container" v-if="currentGraph === 'consumption'">
      <BarGraph></BarGraph>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';
import { useRouter } from 'vue-router';
import Graph from './Graph.vue';
import BarGraph from './yieldGraph.vue';
import panelTwo from './panelTwo.vue';
import panelThree from './panelThree.vue';

const currentPanel = ref("panelOne"); // Default to Solar Panel 1
const currentGraph = ref("yield");
const isLineChart = ref(false);
const solarData = ref([]);
const showCalendar = ref(false);
const startDate = ref(null);
const endDate = ref(null);
const newDate = ref("");
const newProduction = ref("");
const errorMessage = ref("");

const router = useRouter();

onMounted(() => {
  const savedData = JSON.parse(localStorage.getItem("solarData") || "[]");
  solarData.value = savedData.map((data) => ({
    date: new Date(data.date),
    production: data.production,
  }));
});

const goTo = (path) => {
  router.push(path);
};

const switchGraph = (graphType) => {
  currentGraph.value = graphType;
};

const formatDateInput = () => {
  let date = newDate.value.replace(/\D/g, "");
  if (date.length > 4) date = date.slice(0, 4) + "/" + date.slice(4);
  if (date.length > 7) date = date.slice(0, 7) + "/" + date.slice(7);
  newDate.value = date.slice(0, 10);
};

const allowOnlyNumbers = (event) => {
  const char = String.fromCharCode(event.which);
  if (!/[0-9]/.test(char)) event.preventDefault();
};

const addData = () => {
  const [year, month, day] = newDate.value.split("/").map(Number);
  if (newDate.value && newProduction.value > 0) {
    solarData.value.push({
      date: new Date(year, month - 1, day),
      production: parseFloat(newProduction.value),
    });
    localStorage.setItem("solarData", JSON.stringify(solarData.value));
    newDate.value = "";
    newProduction.value = "";
  }
};

const removeData = (index) => {
  solarData.value.splice(index, 1);
  localStorage.setItem("solarData", JSON.stringify(solarData.value));
};

const clearData = () => {
  solarData.value = [];
  localStorage.removeItem("solarData");
};

const openCalendar = () => {
  showCalendar.value = true;
};

const closeCalendar = () => {
  showCalendar.value = false;
};

const exportData = () => {
  const data = JSON.stringify(solarData.value, null, 2);
  const blob = new Blob([data], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = "solar_data.json";
  link.click();
};
</script>


<style scoped>
/* Navbar styling */
.navbar {
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  display: flex;
  justify-content: space-around;
  background-color: rgba(255, 255, 255, 0.9); /* Slight transparency */
  backdrop-filter: blur(10px); /* Blur for smooth background */
  padding: 10px 20px;
  z-index: 1000; /* Ensures navbar stays on top of other content */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Add subtle shadow */
  transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.navbar:hover {
  background-color: #fafafa; /* Slight color change on hover */
}

.nav-button {
  background-color: transparent;
  border: none;
  padding: 10px 20px;
  color: #333;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s, color 0.3s, transform 0.3s ease; /* Smooth transition for hover and active states */
}

.nav-button:hover {
  background-color: #f0f0f0; /* Slight background change */
  color: #0056b3; /* Hover color */
  transform: translateY(-2px); /* Subtle lift on hover */
}

.nav-button:active {
  transform: translateY(1px); /* Lower it when pressed */
  transition: transform 0.1s; /* Faster response on active */
}

/* Navbar adjustments on scroll for a smoother feel */
.navbar.scrolled {
  background-color: rgba(255, 255, 255, 1); /* Fully opaque when scrolled */
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2); /* More shadow when scrolled */
}

/* Container for the overall layout */
.container {
  position: relative;
  top: 60px; /* Adds space below the fixed navbar */
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

.chart-container {
  position: relative;
  width: 1000px;
  height: 500px;
}

/* Home button style */
.home-button {
  position: absolute;
  top: 20px;
  left: 20px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.home-button:hover {
  background-color: #0056b3;
}

/* Date selection button */
.current-date-button {
  position: absolute;
  top: -55px;
  left: 125px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: 1px solid #ced4da;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.current-date-button:hover {
  background-color: #0056b3;
}

/* Export button */
.export-button {
  position: fixed;
  top: 70px;
  right: 30px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
  z-index: 1001;
}

.export-button:hover {
  background-color: #218838;
}

/* Modal for calendar overlay */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal {
  background: white;
  padding: 20px;
  border-radius: 8px;
  width: 400px;
  text-align: center;
}

/* Calendar container inside the modal */
.calendar-container {
  display: flex;
  justify-content: space-between;
  margin: 20px 0;
}

.calendar {
  width: 45%;
}

/* Error message styling */
.error-message {
  color: red;
  font-size: 14px;
}

/* Button for switching between panels */
.solar-panels-button {
  position: absolute;
  top: -55px;
  left: 500px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: 1px solid #ced4da;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.solar-panels-button:hover {
  background-color: #0056b3;
}

/* Style for the line chart checkbox */
.line-chart-toggle-button {
  position: absolute;
  top: -55px;
  left: 650px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff; /* Light gray background */
  color: white;
  border: 1px solid #ced4da; /* Subtle border */
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s, transform 0.3s ease;
}

.line-chart-toggle-button:hover {
  background-color: #0056b3; /* Darker background on hover */
}

.line-chart-toggle-button:active {
  transform: translateY(1px); /* Slight push effect when clicked */
}

/* Dropdown styling */
.dropdown {
  position: absolute;
  top: 30px;
  left: 0;
  background-color: white;
  border: 1px solid #ced4da;
  border-radius: 5px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
  z-index: 1;
}

.dropdown ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

.dropdown li {
  padding: 10px 20px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.dropdown li:hover {
  background-color: #e2e6ea;
}

/* Solar Panel Selection Modal */
.solar-panel-container {
  margin-top: 20px;
}

.solar-panels-button {
  padding: 10px 20px;
  font-size: 16px;
  cursor: pointer;
  background-color: #5e60ce;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.solar-panels-button:hover {
  background-color: #4b4fb3;
}

.panel-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px;
  background-color: #ffffff;
  border: 1px solid #d3d3d3;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 8px;
  width: 300px;
  text-align: center;
  z-index: 1000; /* Ensure itâ€™s above other elements */
}

.panel-modal h3 {
  margin-bottom: 15px;
}

.panel-modal button {
  display: block;
  width: 100%;
  padding: 10px;
  margin: 5px 0;
  background-color: #5e60ce;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.panel-modal button:hover {
  background-color: #4b4fb3;
}

button {
  margin-top: 20px; /* Space above the button */
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px 15px;
  cursor: pointer;
  transition: background-color 0.3s, transform 0.3s; /* Smooth transition */
}

button:hover {
  background-color: #0056b3; /* Darker on hover */
  transform: scale(1.05); /* Slightly larger on hover */
}
</style>
